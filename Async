// Mock data and functions
const posts = [];
let lastActivityTime = null;

// Function to create a post
function createPost(post) {
  return new Promise((resolve) => {
    setTimeout(() => {
      posts.push(post);
      resolve(posts);
    }, 1000);
  });
}

// Async function to create a post using async/await
async function createPostAsync(post) {
  return await createPost(post);
}

// Function to update last user activity time
function updateLastUserActivityTime() {
  return new Promise((resolve) => {
    setTimeout(() => {
      lastActivityTime = new Date();
      resolve(lastActivityTime);
    }, 1000);
  });
}

// Async function to update last user activity time using async/await
async function updateLastUserActivityTimeAsync() {
  return await updateLastUserActivityTime();
}

// Function to delete a post
function deletePost(postIndex) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (posts.length > postIndex) {
        posts.splice(postIndex, 1);
        resolve(posts);
      } else {
        reject(new Error('Invalid post index'));
      }
    }, 1000);
  });
}

// Async function to delete a post using async/await
async function deletePostAsync(postIndex) {
  return await deletePost(postIndex);
}

// Function to handle the entire process
async function handlePostCreation() {
  try {
    const updatedPosts = await createPostAsync("New Post Content");
    console.log("Posts after creation:", updatedPosts);

    const updatedActivityTime = await updateLastUserActivityTimeAsync();
    console.log("Last Activity Time:", updatedActivityTime);

    const remainingPosts = await deletePostAsync(posts.length - 1);
    console.log("Posts after deletion:", remainingPosts);
  } catch (error) {
    console.error("Error:", error.message);
  }
}

// Call the function to simulate the process
handlePostCreation();
